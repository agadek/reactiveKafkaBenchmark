//topicName = "testTopic1"
//topicName = "testTopic10"
//topicName = "testTopic30"
topicName = "testTopic100"
//topicName = "testTopic1000"


kafka {
  kafka-clients {

    poll-timeout-ms = 10ms
    poll-interval = 0ms

    max.poll.records = 10000

    # Tuning property of the `KafkaConsumer.poll` parameter.
    # Note that non-zero value means that blocking of the thread that
    # is executing the stage will be blocked.
    poll-timeout = 1ms

    source-buffer-size = 100000

    # The stage will be await outstanding offset commit requests before
    # shutting down, but if that takes longer than this timeout it will
    # stop forcefully.
    stop-timeout = 10s

    # How long to wait for `KafkaConsumer.close`
    close-timeout = 10s

    # If offset commit requests are not completed within this timeout
    # the returned Future is completed `TimeoutException`.
    commit-timeout = 10000s

    # If the KafkaConsumer can't connect to the broker the poll will be
    # aborted after this timeout. The KafkaConsumerActor will throw
    # org.apache.kafka.common.errors.WakeupException which will be ignored
    # until max-wakeups limit gets exceeded.
    wakeup-timeout = 100ms

    # After exceeding maxinum wakeups the consumer will stop and the stage will fail.
    max-wakeups = 1000

    # Fully qualified config path which holds the dispatcher configuration
    # to be used by the KafkaConsumerActor. Some blocking may occur.
    use-dispatcher = "akka.kafka.default-dispatcher"

    kafka-clients {
      # Disable auto-commit by default
      enable.auto.commit = false
    }
  }
}


akka.kafka.default-dispatcher {
  type = "Dispatcher"
  executor = "thread-pool-executor"

  thread-pool-executor {
    fixed-pool-size = 10
  }
}


akka {
  stream {
    materializer {
      dispatcher = "akka.kafka.default-dispatcher"
    }
  }
}
